JS
    1. 核心ECMAScript
    2. 文档对象模型（DOM），Document Object Model（整合js,css,html）
    3. 浏览器对象模型（BOM），Browser Object Model（整合js和浏览器）

引入JS：
    JavaScript的引入方式
        {#1 直接编写#}
            <script>
                alert('hello yuan')
            </script>
        {#2 导入文件#}
            <script src="hello.js"></script>　　

JS注释：
    1. //
    2. /* */   

JavaScript 变量:
    变量必须以字母开头
    变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）
    变量名称对大小写敏感（y 和 Y 是不同的变量）

    匈牙利类型标记法：
        在以Pascal标记法的命名的变量前附加一个小写字母，声明类型；i整数，s字符串


JS数据类型
    1. 数字类型
        JavaScript不区分整数和浮点数，统一用Number表示
        十六进制用0x前缀和0-9，a-f表示
        八进制前面加0和0-7等8个数字组成
        精确表达的范围是 -9007199254740992 (-253) 到 9007199254740992 (253)
    
    2. 字符串
        是由Unicode字符、数字、标点符号组成的序列
        字符串常量首尾由单引号或双引号括起
        JavaScript中没有字符类型
        常用特殊字符在字符串中的表达
        字符串中部分特殊字符必须加上右划线\
        常用的转义字符 \n:换行  \':单引号   \":双引号  \\:右划线
    3. 布尔类型：true和false
    4. Undefined
        内部只有一个值，Undefined
        如果声明了某个变量，但未对其赋值，则该变量称为Undefined
    5. Null
    6. 数据类型的转换
        数字 + 字符串：数字转换为字符串
        数字 + 布尔值：true转换为1，false转换为0 
        字符串 + 布尔值：布尔值转换为字符串true或false
        parseInt
        parseFloat
        eval：将字符串强制转换为表达式并返回结果
        类型查询函数：typeof
        NaN数据出现在表达式中一定结果为false，除了!=


运算符
    算术运算符：
        加(＋)、 减(－)、 乘(*) 、除(/) 、余数(% )
        递增(＋＋) 、递减(－－)
    逻辑运算符：
        等于 ( == )  、不等于( != ) 、 大于( > ) 、 小于( < )  大于等于(>=) 、小于等于(<=)、与 (&&) 、或(||) 、非(!)
            逻辑 AND 运算的运算数可以是任何类型的，不止是 Boolean 值。
                如果某个运算数不是原始的 Boolean 型值，逻辑 AND 运算并不一定返回 Boolean 值：
                如果某个运算数是 null，返回 null。 
                如果某个运算数是 NaN，返回 NaN。 
                如果某个运算数是 undefined，返回undefined。 
            逻辑 OR 运算符(||)
                与逻辑 AND 运算符相似，如果某个运算数不是 Boolean 值，逻辑 OR 运算并不一定返回 Boolean 值

== & ===
    1、对于string,number等基础类型，==和===是有区别的
        1）不同类型间比较，==之比较“转化成同一类型后的值”看“值”是否相等，===如果类型不同，其结果就是不等
        2）同类型比较，直接进行“值”比较，两者结果一样
    2、对于Array,Object等高级类型，==和===是没有区别的
        进行“指针地址”比较
    3、基础类型与高级类型，==和===是有区别的
        1）对于==，将高级转化为基础类型，进行“值”比较
        2）因为类型不同，===结果为false

控制语句：
    if (表达式) {
        语句1;
        ...
    } else if {
        语句2;
        ...
    } else {
        ...
    }

    switch (表达式) {
        case 值1:语句1;break;
        case 值2:语句2;break;
        case 值3:语句3;break;
        default:语句4;
    }

    for (初始化;条件;增量){
        语句1;
        ...
    }

    while (条件){
        语句1；
        ...
    }


异常处理：
    try {
        //这段代码从上往下运行，其中任何一个语句抛出异常该代码块就结束运行
    }
    catch (e) {
        // 如果try代码块中抛出了异常，catch代码块中的代码就会被执行。
        //e是一个局部变量，用来指向Error对象或者其他抛出的对象
    }
    finally {
        //无论try中代码是否有异常抛出（甚至是try代码块中有return语句），finally代码块中始终会被执行。
    }


ECMA对象：
    Array ,String , Date, Math, Boolean, Number  Function, Global, Error, RegExp , Object

function对象：
    function 函数名 (参数) {
        函数体;
        return 返回值;
    }

    var func = new Function("参数1","参数2","函数体")

    属性和方法：
        length: 声明了函数期望的参数个数
        运算符void()作用：拦截方法的返回值　
        