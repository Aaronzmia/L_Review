# 分布式系统
    1. 系统的各组件分布于网络上的多个计算机
    2. 各组件彼此之间仅仅通过消息传递来通信并协调行动；

## 分布式存在的意义
    1. 向上扩展的性价比越来越低
    2. 单机扩展存在性能临界点
    3. 出于稳定性及可用性的考虑，单机会存在多方面的问题

## 多CPU：多线程编程
    互不通信的线程模型
    基于共享容器协同工作的模型
    通过事件协调的多线程模型
        A，B
            A：触发事件
                B: 
    多进程模型

## 网络IO：
    多进程：每个进程响应一个请求
    多线程，多进程，每进程生成多个线程，每线程响应一个用户请求
    多线程，每线程直接响应多个请求

    基于socket实现网络通信开发，其实现方式：
        BIO：Blocking IO
            一个进程或线程处理一个请求，每个连接都需要占用一个套接字
        NIO：NonBlocking IO 
            基于事件驱动(epoll)的思想，采用Reactor模式，每个socket,套接字分为一个线程，而且一个线程中可以处理多个套接字相关的工作；
        AIO：Asynchronous IO
            基于事件驱动(epoll)的思想，采用Proactor模式，反射 

## 如何把应用从单机扩展至多机
    输入设备的变化：通过网络接口彼此间互相发信息
    输出设备的变化：通过网络发送给同一个系统内的其它任意节点
    控制器：转变成独立的节点，能够处理请求转发给后端的主机
        实现模式：
            透明代理：用户请求被发往一个控制器，但用户就以为这个控制器为响应者
                lvs的nat
                haproxy, nginx
            旁路模式：服务式直接响应
                lvs的DR、TUN
            名称服务：基于名称服务实现将请求发送给某个提供名称服务的主机，由其通过名称解析后给定向到目标节点
            规则服务：规则服务器定义了转发请求的规则，某次查询的第一次才需要查找
            Master机制
    运算器：
        分布式的主要目的就是拆离控制器和运算器
    存储器：
        要把承担存储功能的多个节点组织成一个存储器提供服务

## 分布式系统实现的难点
      缺乏全局时钟信号：无法做到步调一致
      面对故障的独立性：当出现故障时，如何判定故障发生在何处，是否独立；一个节点出现问题，会不会不影响整个系统的工作
      如何处理单点故障
      事务处理：
        ACID

## 大型网站站点的架构演进方式
    LAMT，LNMT
    